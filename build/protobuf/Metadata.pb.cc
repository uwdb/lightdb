// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lightdb {
namespace serialization {

namespace {

const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_Volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_Volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_Equirectangular_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_Equirectangular_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_Equirectangular_Samples_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_Equirectangular_Samples_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_Entry_reflection_ = NULL;
struct Metadata_EntryOneofInstance {
  const ::lightdb::serialization::Metadata_Equirectangular* equirectangular_;
}* Metadata_Entry_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Metadata_EntryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Metadata_2eproto() {
  protobuf_AddDesc_Metadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Metadata.proto");
  GOOGLE_CHECK(file != NULL);
  Metadata_descriptor_ = file->message_type(0);
  static const int Metadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, entries_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  Metadata_Volume_descriptor_ = Metadata_descriptor_->nested_type(0);
  static const int Metadata_Volume_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, z1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, z2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, t2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, theta1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, theta2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, phi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, phi2_),
  };
  Metadata_Volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_Volume_descriptor_,
      Metadata_Volume::default_instance_,
      Metadata_Volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata_Volume));
  Metadata_Equirectangular_descriptor_ = Metadata_descriptor_->nested_type(1);
  static const int Metadata_Equirectangular_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular, samples_),
  };
  Metadata_Equirectangular_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_Equirectangular_descriptor_,
      Metadata_Equirectangular::default_instance_,
      Metadata_Equirectangular_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata_Equirectangular));
  Metadata_Equirectangular_Samples_descriptor_ = Metadata_Equirectangular_descriptor_->nested_type(0);
  static const int Metadata_Equirectangular_Samples_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular_Samples, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular_Samples, y_),
  };
  Metadata_Equirectangular_Samples_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_Equirectangular_Samples_descriptor_,
      Metadata_Equirectangular_Samples::default_instance_,
      Metadata_Equirectangular_Samples_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular_Samples, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Equirectangular_Samples, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata_Equirectangular_Samples));
  Metadata_Entry_descriptor_ = Metadata_descriptor_->nested_type(2);
  static const int Metadata_Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, partitions_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metadata_Entry_default_oneof_instance_, equirectangular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, projection_),
  };
  Metadata_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_Entry_descriptor_,
      Metadata_Entry::default_instance_,
      Metadata_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, _unknown_fields_),
      -1,
      Metadata_Entry_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_Entry, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata_Entry));
  Metadata_EntryType_descriptor_ = Metadata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Metadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_Volume_descriptor_, &Metadata_Volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_Equirectangular_descriptor_, &Metadata_Equirectangular::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_Equirectangular_Samples_descriptor_, &Metadata_Equirectangular_Samples::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_Entry_descriptor_, &Metadata_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Metadata_2eproto() {
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Metadata_Volume::default_instance_;
  delete Metadata_Volume_reflection_;
  delete Metadata_Equirectangular::default_instance_;
  delete Metadata_Equirectangular_reflection_;
  delete Metadata_Equirectangular_Samples::default_instance_;
  delete Metadata_Equirectangular_Samples_reflection_;
  delete Metadata_Entry::default_instance_;
  delete Metadata_Entry_default_oneof_instance_;
  delete Metadata_Entry_reflection_;
}

void protobuf_AddDesc_Metadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Metadata.proto\022\025lightdb.serialization\""
    "\203\005\n\010Metadata\022\017\n\007version\030\001 \002(\r\0226\n\007entries"
    "\030\002 \003(\0132%.lightdb.serialization.Metadata."
    "Entry\032\244\001\n\006Volume\022\n\n\002x1\030\001 \001(\001\022\n\n\002x2\030\002 \001(\001"
    "\022\n\n\002y1\030\003 \001(\001\022\n\n\002y2\030\004 \001(\001\022\n\n\002z1\030\005 \001(\001\022\n\n\002"
    "z2\030\006 \001(\001\022\n\n\002t1\030\007 \001(\001\022\n\n\002t2\030\010 \001(\001\022\016\n\006thet"
    "a1\030\t \001(\001\022\016\n\006theta2\030\n \001(\001\022\014\n\004phi1\030\013 \001(\001\022\014"
    "\n\004phi2\030\014 \001(\001\032|\n\017Equirectangular\022H\n\007sampl"
    "es\030\001 \001(\01327.lightdb.serialization.Metadat"
    "a.Equirectangular.Samples\032\037\n\007Samples\022\t\n\001"
    "x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\032\326\001\n\005Entry\0227\n\004type\030\001 \002"
    "(\0162).lightdb.serialization.Metadata.Entr"
    "yType\022:\n\npartitions\030\002 \003(\0132&.lightdb.seri"
    "alization.Metadata.Volume\022J\n\017equirectang"
    "ular\030\003 \001(\0132/.lightdb.serialization.Metad"
    "ata.EquirectangularH\000B\014\n\nprojection\"0\n\tE"
    "ntryType\022\r\n\tCOMPOSITE\020\000\022\t\n\005POINT\020\001\022\t\n\005PL"
    "ANE\020\002", 685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Metadata.proto", &protobuf_RegisterTypes);
  Metadata::default_instance_ = new Metadata();
  Metadata_Volume::default_instance_ = new Metadata_Volume();
  Metadata_Equirectangular::default_instance_ = new Metadata_Equirectangular();
  Metadata_Equirectangular_Samples::default_instance_ = new Metadata_Equirectangular_Samples();
  Metadata_Entry::default_instance_ = new Metadata_Entry();
  Metadata_Entry_default_oneof_instance_ = new Metadata_EntryOneofInstance;
  Metadata::default_instance_->InitAsDefaultInstance();
  Metadata_Volume::default_instance_->InitAsDefaultInstance();
  Metadata_Equirectangular::default_instance_->InitAsDefaultInstance();
  Metadata_Equirectangular_Samples::default_instance_->InitAsDefaultInstance();
  Metadata_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Metadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Metadata_2eproto {
  StaticDescriptorInitializer_Metadata_2eproto() {
    protobuf_AddDesc_Metadata_2eproto();
  }
} static_descriptor_initializer_Metadata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Metadata_EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_EntryType_descriptor_;
}
bool Metadata_EntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Metadata_EntryType Metadata::COMPOSITE;
const Metadata_EntryType Metadata::POINT;
const Metadata_EntryType Metadata::PLANE;
const Metadata_EntryType Metadata::EntryType_MIN;
const Metadata_EntryType Metadata::EntryType_MAX;
const int Metadata::EntryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Metadata_Volume::kX1FieldNumber;
const int Metadata_Volume::kX2FieldNumber;
const int Metadata_Volume::kY1FieldNumber;
const int Metadata_Volume::kY2FieldNumber;
const int Metadata_Volume::kZ1FieldNumber;
const int Metadata_Volume::kZ2FieldNumber;
const int Metadata_Volume::kT1FieldNumber;
const int Metadata_Volume::kT2FieldNumber;
const int Metadata_Volume::kTheta1FieldNumber;
const int Metadata_Volume::kTheta2FieldNumber;
const int Metadata_Volume::kPhi1FieldNumber;
const int Metadata_Volume::kPhi2FieldNumber;
#endif  // !_MSC_VER

Metadata_Volume::Metadata_Volume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightdb.serialization.Metadata.Volume)
}

void Metadata_Volume::InitAsDefaultInstance() {
}

Metadata_Volume::Metadata_Volume(const Metadata_Volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lightdb.serialization.Metadata.Volume)
}

void Metadata_Volume::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  y1_ = 0;
  y2_ = 0;
  z1_ = 0;
  z2_ = 0;
  t1_ = 0;
  t2_ = 0;
  theta1_ = 0;
  theta2_ = 0;
  phi1_ = 0;
  phi2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata_Volume::~Metadata_Volume() {
  // @@protoc_insertion_point(destructor:lightdb.serialization.Metadata.Volume)
  SharedDtor();
}

void Metadata_Volume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata_Volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata_Volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_Volume_descriptor_;
}

const Metadata_Volume& Metadata_Volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metadata_2eproto();
  return *default_instance_;
}

Metadata_Volume* Metadata_Volume::default_instance_ = NULL;

Metadata_Volume* Metadata_Volume::New() const {
  return new Metadata_Volume;
}

void Metadata_Volume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Metadata_Volume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x1_, t2_);
  }
  ZR_(theta1_, phi2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata_Volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightdb.serialization.Metadata.Volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x1 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x2;
        break;
      }

      // optional double x2 = 2;
      case 2: {
        if (tag == 17) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y1;
        break;
      }

      // optional double y1 = 3;
      case 3: {
        if (tag == 25) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y2;
        break;
      }

      // optional double y2 = 4;
      case 4: {
        if (tag == 33) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z1;
        break;
      }

      // optional double z1 = 5;
      case 5: {
        if (tag == 41) {
         parse_z1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z1_)));
          set_has_z1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z2;
        break;
      }

      // optional double z2 = 6;
      case 6: {
        if (tag == 49) {
         parse_z2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z2_)));
          set_has_z2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_t1;
        break;
      }

      // optional double t1 = 7;
      case 7: {
        if (tag == 57) {
         parse_t1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t1_)));
          set_has_t1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_t2;
        break;
      }

      // optional double t2 = 8;
      case 8: {
        if (tag == 65) {
         parse_t2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t2_)));
          set_has_t2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_theta1;
        break;
      }

      // optional double theta1 = 9;
      case 9: {
        if (tag == 73) {
         parse_theta1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta1_)));
          set_has_theta1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_theta2;
        break;
      }

      // optional double theta2 = 10;
      case 10: {
        if (tag == 81) {
         parse_theta2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta2_)));
          set_has_theta2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_phi1;
        break;
      }

      // optional double phi1 = 11;
      case 11: {
        if (tag == 89) {
         parse_phi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi1_)));
          set_has_phi1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_phi2;
        break;
      }

      // optional double phi2 = 12;
      case 12: {
        if (tag == 97) {
         parse_phi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi2_)));
          set_has_phi2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightdb.serialization.Metadata.Volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightdb.serialization.Metadata.Volume)
  return false;
#undef DO_
}

void Metadata_Volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightdb.serialization.Metadata.Volume)
  // optional double x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x1(), output);
  }

  // optional double x2 = 2;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x2(), output);
  }

  // optional double y1 = 3;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y1(), output);
  }

  // optional double y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y2(), output);
  }

  // optional double z1 = 5;
  if (has_z1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z1(), output);
  }

  // optional double z2 = 6;
  if (has_z2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z2(), output);
  }

  // optional double t1 = 7;
  if (has_t1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->t1(), output);
  }

  // optional double t2 = 8;
  if (has_t2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->t2(), output);
  }

  // optional double theta1 = 9;
  if (has_theta1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->theta1(), output);
  }

  // optional double theta2 = 10;
  if (has_theta2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->theta2(), output);
  }

  // optional double phi1 = 11;
  if (has_phi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->phi1(), output);
  }

  // optional double phi2 = 12;
  if (has_phi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->phi2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightdb.serialization.Metadata.Volume)
}

::google::protobuf::uint8* Metadata_Volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightdb.serialization.Metadata.Volume)
  // optional double x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x1(), target);
  }

  // optional double x2 = 2;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x2(), target);
  }

  // optional double y1 = 3;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y1(), target);
  }

  // optional double y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y2(), target);
  }

  // optional double z1 = 5;
  if (has_z1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z1(), target);
  }

  // optional double z2 = 6;
  if (has_z2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z2(), target);
  }

  // optional double t1 = 7;
  if (has_t1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->t1(), target);
  }

  // optional double t2 = 8;
  if (has_t2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->t2(), target);
  }

  // optional double theta1 = 9;
  if (has_theta1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->theta1(), target);
  }

  // optional double theta2 = 10;
  if (has_theta2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->theta2(), target);
  }

  // optional double phi1 = 11;
  if (has_phi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->phi1(), target);
  }

  // optional double phi2 = 12;
  if (has_phi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->phi2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightdb.serialization.Metadata.Volume)
  return target;
}

int Metadata_Volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x1 = 1;
    if (has_x1()) {
      total_size += 1 + 8;
    }

    // optional double x2 = 2;
    if (has_x2()) {
      total_size += 1 + 8;
    }

    // optional double y1 = 3;
    if (has_y1()) {
      total_size += 1 + 8;
    }

    // optional double y2 = 4;
    if (has_y2()) {
      total_size += 1 + 8;
    }

    // optional double z1 = 5;
    if (has_z1()) {
      total_size += 1 + 8;
    }

    // optional double z2 = 6;
    if (has_z2()) {
      total_size += 1 + 8;
    }

    // optional double t1 = 7;
    if (has_t1()) {
      total_size += 1 + 8;
    }

    // optional double t2 = 8;
    if (has_t2()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double theta1 = 9;
    if (has_theta1()) {
      total_size += 1 + 8;
    }

    // optional double theta2 = 10;
    if (has_theta2()) {
      total_size += 1 + 8;
    }

    // optional double phi1 = 11;
    if (has_phi1()) {
      total_size += 1 + 8;
    }

    // optional double phi2 = 12;
    if (has_phi2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata_Volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata_Volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata_Volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata_Volume::MergeFrom(const Metadata_Volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_z1()) {
      set_z1(from.z1());
    }
    if (from.has_z2()) {
      set_z2(from.z2());
    }
    if (from.has_t1()) {
      set_t1(from.t1());
    }
    if (from.has_t2()) {
      set_t2(from.t2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_theta1()) {
      set_theta1(from.theta1());
    }
    if (from.has_theta2()) {
      set_theta2(from.theta2());
    }
    if (from.has_phi1()) {
      set_phi1(from.phi1());
    }
    if (from.has_phi2()) {
      set_phi2(from.phi2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata_Volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata_Volume::CopyFrom(const Metadata_Volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_Volume::IsInitialized() const {

  return true;
}

void Metadata_Volume::Swap(Metadata_Volume* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(y1_, other->y1_);
    std::swap(y2_, other->y2_);
    std::swap(z1_, other->z1_);
    std::swap(z2_, other->z2_);
    std::swap(t1_, other->t1_);
    std::swap(t2_, other->t2_);
    std::swap(theta1_, other->theta1_);
    std::swap(theta2_, other->theta2_);
    std::swap(phi1_, other->phi1_);
    std::swap(phi2_, other->phi2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata_Volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_Volume_descriptor_;
  metadata.reflection = Metadata_Volume_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadata_Equirectangular_Samples::kXFieldNumber;
const int Metadata_Equirectangular_Samples::kYFieldNumber;
#endif  // !_MSC_VER

Metadata_Equirectangular_Samples::Metadata_Equirectangular_Samples()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightdb.serialization.Metadata.Equirectangular.Samples)
}

void Metadata_Equirectangular_Samples::InitAsDefaultInstance() {
}

Metadata_Equirectangular_Samples::Metadata_Equirectangular_Samples(const Metadata_Equirectangular_Samples& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lightdb.serialization.Metadata.Equirectangular.Samples)
}

void Metadata_Equirectangular_Samples::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata_Equirectangular_Samples::~Metadata_Equirectangular_Samples() {
  // @@protoc_insertion_point(destructor:lightdb.serialization.Metadata.Equirectangular.Samples)
  SharedDtor();
}

void Metadata_Equirectangular_Samples::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata_Equirectangular_Samples::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata_Equirectangular_Samples::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_Equirectangular_Samples_descriptor_;
}

const Metadata_Equirectangular_Samples& Metadata_Equirectangular_Samples::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metadata_2eproto();
  return *default_instance_;
}

Metadata_Equirectangular_Samples* Metadata_Equirectangular_Samples::default_instance_ = NULL;

Metadata_Equirectangular_Samples* Metadata_Equirectangular_Samples::New() const {
  return new Metadata_Equirectangular_Samples;
}

void Metadata_Equirectangular_Samples::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Metadata_Equirectangular_Samples*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata_Equirectangular_Samples::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightdb.serialization.Metadata.Equirectangular.Samples)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightdb.serialization.Metadata.Equirectangular.Samples)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightdb.serialization.Metadata.Equirectangular.Samples)
  return false;
#undef DO_
}

void Metadata_Equirectangular_Samples::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightdb.serialization.Metadata.Equirectangular.Samples)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightdb.serialization.Metadata.Equirectangular.Samples)
}

::google::protobuf::uint8* Metadata_Equirectangular_Samples::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightdb.serialization.Metadata.Equirectangular.Samples)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightdb.serialization.Metadata.Equirectangular.Samples)
  return target;
}

int Metadata_Equirectangular_Samples::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata_Equirectangular_Samples::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata_Equirectangular_Samples* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata_Equirectangular_Samples*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata_Equirectangular_Samples::MergeFrom(const Metadata_Equirectangular_Samples& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata_Equirectangular_Samples::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata_Equirectangular_Samples::CopyFrom(const Metadata_Equirectangular_Samples& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_Equirectangular_Samples::IsInitialized() const {

  return true;
}

void Metadata_Equirectangular_Samples::Swap(Metadata_Equirectangular_Samples* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata_Equirectangular_Samples::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_Equirectangular_Samples_descriptor_;
  metadata.reflection = Metadata_Equirectangular_Samples_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadata_Equirectangular::kSamplesFieldNumber;
#endif  // !_MSC_VER

Metadata_Equirectangular::Metadata_Equirectangular()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightdb.serialization.Metadata.Equirectangular)
}

void Metadata_Equirectangular::InitAsDefaultInstance() {
  samples_ = const_cast< ::lightdb::serialization::Metadata_Equirectangular_Samples*>(&::lightdb::serialization::Metadata_Equirectangular_Samples::default_instance());
}

Metadata_Equirectangular::Metadata_Equirectangular(const Metadata_Equirectangular& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lightdb.serialization.Metadata.Equirectangular)
}

void Metadata_Equirectangular::SharedCtor() {
  _cached_size_ = 0;
  samples_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata_Equirectangular::~Metadata_Equirectangular() {
  // @@protoc_insertion_point(destructor:lightdb.serialization.Metadata.Equirectangular)
  SharedDtor();
}

void Metadata_Equirectangular::SharedDtor() {
  if (this != default_instance_) {
    delete samples_;
  }
}

void Metadata_Equirectangular::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata_Equirectangular::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_Equirectangular_descriptor_;
}

const Metadata_Equirectangular& Metadata_Equirectangular::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metadata_2eproto();
  return *default_instance_;
}

Metadata_Equirectangular* Metadata_Equirectangular::default_instance_ = NULL;

Metadata_Equirectangular* Metadata_Equirectangular::New() const {
  return new Metadata_Equirectangular;
}

void Metadata_Equirectangular::Clear() {
  if (has_samples()) {
    if (samples_ != NULL) samples_->::lightdb::serialization::Metadata_Equirectangular_Samples::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata_Equirectangular::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightdb.serialization.Metadata.Equirectangular)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lightdb.serialization.Metadata.Equirectangular.Samples samples = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightdb.serialization.Metadata.Equirectangular)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightdb.serialization.Metadata.Equirectangular)
  return false;
#undef DO_
}

void Metadata_Equirectangular::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightdb.serialization.Metadata.Equirectangular)
  // optional .lightdb.serialization.Metadata.Equirectangular.Samples samples = 1;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->samples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightdb.serialization.Metadata.Equirectangular)
}

::google::protobuf::uint8* Metadata_Equirectangular::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightdb.serialization.Metadata.Equirectangular)
  // optional .lightdb.serialization.Metadata.Equirectangular.Samples samples = 1;
  if (has_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->samples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightdb.serialization.Metadata.Equirectangular)
  return target;
}

int Metadata_Equirectangular::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lightdb.serialization.Metadata.Equirectangular.Samples samples = 1;
    if (has_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->samples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata_Equirectangular::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata_Equirectangular* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata_Equirectangular*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata_Equirectangular::MergeFrom(const Metadata_Equirectangular& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_samples()) {
      mutable_samples()->::lightdb::serialization::Metadata_Equirectangular_Samples::MergeFrom(from.samples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata_Equirectangular::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata_Equirectangular::CopyFrom(const Metadata_Equirectangular& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_Equirectangular::IsInitialized() const {

  return true;
}

void Metadata_Equirectangular::Swap(Metadata_Equirectangular* other) {
  if (other != this) {
    std::swap(samples_, other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata_Equirectangular::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_Equirectangular_descriptor_;
  metadata.reflection = Metadata_Equirectangular_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadata_Entry::kTypeFieldNumber;
const int Metadata_Entry::kPartitionsFieldNumber;
const int Metadata_Entry::kEquirectangularFieldNumber;
#endif  // !_MSC_VER

Metadata_Entry::Metadata_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightdb.serialization.Metadata.Entry)
}

void Metadata_Entry::InitAsDefaultInstance() {
  Metadata_Entry_default_oneof_instance_->equirectangular_ = const_cast< ::lightdb::serialization::Metadata_Equirectangular*>(&::lightdb::serialization::Metadata_Equirectangular::default_instance());
}

Metadata_Entry::Metadata_Entry(const Metadata_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lightdb.serialization.Metadata.Entry)
}

void Metadata_Entry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_projection();
}

Metadata_Entry::~Metadata_Entry() {
  // @@protoc_insertion_point(destructor:lightdb.serialization.Metadata.Entry)
  SharedDtor();
}

void Metadata_Entry::SharedDtor() {
  if (has_projection()) {
    clear_projection();
  }
  if (this != default_instance_) {
  }
}

void Metadata_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_Entry_descriptor_;
}

const Metadata_Entry& Metadata_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metadata_2eproto();
  return *default_instance_;
}

Metadata_Entry* Metadata_Entry::default_instance_ = NULL;

Metadata_Entry* Metadata_Entry::New() const {
  return new Metadata_Entry;
}

void Metadata_Entry::clear_projection() {
  switch(projection_case()) {
    case kEquirectangular: {
      delete projection_.equirectangular_;
      break;
    }
    case PROJECTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROJECTION_NOT_SET;
}


void Metadata_Entry::Clear() {
  type_ = 0;
  partitions_.Clear();
  clear_projection();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightdb.serialization.Metadata.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lightdb.serialization.Metadata.EntryType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lightdb::serialization::Metadata_EntryType_IsValid(value)) {
            set_type(static_cast< ::lightdb::serialization::Metadata_EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated .lightdb.serialization.Metadata.Volume partitions = 2;
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        if (input->ExpectTag(26)) goto parse_equirectangular;
        break;
      }

      // optional .lightdb.serialization.Metadata.Equirectangular equirectangular = 3;
      case 3: {
        if (tag == 26) {
         parse_equirectangular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equirectangular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightdb.serialization.Metadata.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightdb.serialization.Metadata.Entry)
  return false;
#undef DO_
}

void Metadata_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightdb.serialization.Metadata.Entry)
  // required .lightdb.serialization.Metadata.EntryType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .lightdb.serialization.Metadata.Volume partitions = 2;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partitions(i), output);
  }

  // optional .lightdb.serialization.Metadata.Equirectangular equirectangular = 3;
  if (has_equirectangular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equirectangular(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightdb.serialization.Metadata.Entry)
}

::google::protobuf::uint8* Metadata_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightdb.serialization.Metadata.Entry)
  // required .lightdb.serialization.Metadata.EntryType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .lightdb.serialization.Metadata.Volume partitions = 2;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->partitions(i), target);
  }

  // optional .lightdb.serialization.Metadata.Equirectangular equirectangular = 3;
  if (has_equirectangular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equirectangular(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightdb.serialization.Metadata.Entry)
  return target;
}

int Metadata_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lightdb.serialization.Metadata.EntryType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .lightdb.serialization.Metadata.Volume partitions = 2;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  switch (projection_case()) {
    // optional .lightdb.serialization.Metadata.Equirectangular equirectangular = 3;
    case kEquirectangular: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equirectangular());
      break;
    }
    case PROJECTION_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata_Entry::MergeFrom(const Metadata_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  switch (from.projection_case()) {
    case kEquirectangular: {
      mutable_equirectangular()->::lightdb::serialization::Metadata_Equirectangular::MergeFrom(from.equirectangular());
      break;
    }
    case PROJECTION_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata_Entry::CopyFrom(const Metadata_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Metadata_Entry::Swap(Metadata_Entry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    partitions_.Swap(&other->partitions_);
    std::swap(projection_, other->projection_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_Entry_descriptor_;
  metadata.reflection = Metadata_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadata::kVersionFieldNumber;
const int Metadata::kEntriesFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightdb.serialization.Metadata)
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lightdb.serialization.Metadata)
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:lightdb.serialization.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metadata_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  version_ = 0u;
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightdb.serialization.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .lightdb.serialization.Metadata.Entry entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightdb.serialization.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightdb.serialization.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightdb.serialization.Metadata)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .lightdb.serialization.Metadata.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightdb.serialization.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightdb.serialization.Metadata)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .lightdb.serialization.Metadata.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightdb.serialization.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .lightdb.serialization.Metadata.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization
}  // namespace lightdb

// @@protoc_insertion_point(global_scope)
